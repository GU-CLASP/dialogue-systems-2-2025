#+TITLE: Lab 1: Information State Update (ISU)

* Preparations
- Create a fork of [[https://github.com/GU-CLASP/sisu][SISU]] and clone it to your working machine.
- Follow the prerequisites in SISU's README. After this, if everything works as expected, your development environment should be ready for doing lab.

SISU contains a partial implementation of IBiS1, and a simple domain. To understand what the system can do, see the automated tests in ~test/dme.test.ts~.

* Task 1: Make system answer depend on day
Extend the implementation so that instead of asking the "Which course?" question, the system asks "Which day?". The system then should ask "Which course?" and provide information according to the table below:

| Course             | Day     | Room |
|--------------------+---------+------|
| Dialogue systems 2 | Friday  | G212 |
| Dialogue systems 2 | Tuesday | J440 |

You will need to start with writing two failing automated tests (in ~test/dme.test.ts~).

This task involves modifying/extending the domain (in ~src/is.ts~) as
well as NLU and NLG (in ~src/nlug.ts~).

* Task 2: 

** Task 2a: Negative system contact feedback

Extend the implementation so that when the user is not saying
anything, the system utters "I didn’t hear anything from you".

This task involves modifying/extending domain-independent parts of the
implementation, e.g. update rules (in ~src/rules.ts~). Specifically, you
will need to come up with a new kind of move that conveys the negative
system contact, and ensure that such a move gets added to ~next_moves~
when the system doesn’t get any user input. You will also need to
ensure that the new kind of move can ge generated by the NLG.

Feel free to let your solution be informed by Larsson (2002, section
3.6 and rule 3.9). But you can also design your own solution.

*Hint*

Start with the following automated test and work out the solution to satisfy it. 
#+begin_src typescript
  describe("Negative system contact feedback", () => {
    runTest([
      { speaker: "sys", message: "Hello! You can ask me anything!" },
      { speaker: "usr", message: "*no_input*" },
      { speaker: "sys", message: "I didn’t hear anything from you." },
    ]);
  });
#+end_src
Then work out the solution which produces the correct move when Speechstate returns "ASR_NOINPUT"

** Task 2b: Feedback followed by repeated question
Ensure that when the system gives negative contact feedback, and previously asked a question from the plan, it asks the question again, e.g. like this:

- S: Hello! You can ask me anything!
- U: *no_input*
- S: I didn’t hear anything from you.
- U: Where is the lecture?
- S: Which day?
- U: *no_input*
- S: I didn’t hear anything from you. Which day?

Depending on how you solved 2a, this might already work.  

** Task 2c (1 bonus VG point)
Ensure that the system provides the room information after several repeated questions. You will need to add another test case to ensure that.

* Task 3 (1 bonus VG point)

Add new rule to SISU (and/or modify existing SISU rules) to support
other grounding strategies in addition to the negative contact
feedback according to Larsson (2002, section 3). For instance,
implement the support for different ways of grounding depending on ASR
confidence scores. As before, start with a test case covering the
desired system behaviour.


* Troubleshooting using logs
Logs can be very useful when troubleshooting the implementation. If
you test live in the browser, you can look at the console in the web
developer tools. In automated testing (~yarn test~), log entries are
printed to the terminal; you can also pipe them to a file with ~yarn
test 2>&1 > test.log~. Feel free to add your own log entries in your
code, with ~console.log(...)~.

* Submission
Report the lab by submitting a link to a pull request containing your solutions, including automated tests (in ~test/dme.test.ts~).

